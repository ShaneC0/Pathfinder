{"version":3,"sources":["Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","App.js","index.js"],"names":["Node","props","className","node","isStart","isEnd","isWall","id","row","col","onMouseDown","onMouseEnter","onMouseUp","dijkstra","grid","startNode","endNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","push","deepCopy","sort","nodeA","nodeB","closestNode","shift","visited","updateUnvisitedNeighbors","unvisitedNeighbors","neighbors","length","filter","neighbor","getUnvisitedNeighbors","previous","aStar","openSet","nodesInVisitedOrder","g","f","hueristic","current","array","lowestIndex","i","lowestF","findNeighbors","tempG","includes","end","x","y","Math","sqrt","App","state","mouseIsPressed","searchStatus","createGrid","this","setState","algo","undefined","animateSort","animateShortestPath","document","getElementById","Promise","resolve","setTimeout","tempGrid","getGridWithWall","newGrid","j","newNode","Infinity","map","rowIndex","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","onClick","handleSort","clear","href","React","Component","rows","cols","createNode","slice","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bcebdc55.chunk.js","sourcesContent":["const Node = (props) => {\n  return (\n    <div\n      className={`node \n        ${props.node.isStart ? \"node-start\" : \"\"} \n        ${props.node.isEnd ? \"node-end\" : \"\"}\n        ${props.node.isWall ? \"node-wall\" : \"\"}`}\n      id={`node-${props.node.row}-${props.node.col}`}\n      onMouseDown={() => props.onMouseDown(props.node.row, props.node.col)}\n      onMouseEnter={() => props.onMouseEnter(props.node.row, props.node.col)}\n      onMouseUp={() => props.onMouseUp()}\n    ></div>\n  );\n};\n\nexport default Node;\n","export function dijkstra(grid, startNode, endNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  let unvisitedNodes = deepCopy(grid);\n  while (unvisitedNodes) {\n\n    sortByDistance(unvisitedNodes);\n\n    const closestNode = unvisitedNodes.shift();\n\n    closestNode.visited = true;\n\n    visitedNodesInOrder.push(closestNode);\n\n    if (closestNode === endNode) return visitedNodesInOrder;\n\n    updateUnvisitedNeighbors(closestNode, grid);\n\n  }\n\n  return undefined;\n}\n\nfunction sortByDistance(nodes) {\n  nodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction deepCopy(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  if(!unvisitedNeighbors) return null\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previous = node;\n  } \n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const { col, row } = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  let unvisited = neighbors.filter((neighbor) => !neighbor.visited);\n  return unvisited.filter(node => !node.isWall)\n}\n","export function aStar(grid, startNode, endNode) {\n    let openSet = []\n    let nodesInVisitedOrder = []\n    startNode.g = 0\n    startNode.f = hueristic(startNode, endNode)\n    openSet.push(startNode)\n    while(openSet.length > 0) {\n        let current = lowestF(openSet)\n        if(current === endNode) {\n            return nodesInVisitedOrder\n        }\n        openSet = openSet.filter(node => node !== current)\n        nodesInVisitedOrder.push(current)\n        let neighbors = findNeighbors(current, grid)\n        for(let i = 0; i < neighbors.length; i++) {\n            let neighbor = neighbors[i]\n            if(neighbor.isWall) continue\n            let tempG = current.g + 1  \n            if(tempG < neighbor.g) {\n                neighbor.previous = current\n                neighbor.g = tempG\n                neighbor.f = neighbor.g + hueristic(neighbor, endNode)\n                if(!openSet.includes(neighbor)) {\n                    openSet.push(neighbor)\n                }\n            }\n        }\n        current.visited = true\n    }\n}\n\nfunction lowestF(array) {\n    let lowestIndex = 0\n    for(let i = 0; i < array.length; i++) {\n        if(array[i].f < array[lowestIndex].f)\n        lowestIndex = i\n    }\n    return array[lowestIndex]\n}\n\nfunction hueristic(node, end) {\n    let x = end.col - node.col\n    let y = end.row - node.row\n    return Math.sqrt((x * x) + (y * y))\n}\n\nfunction findNeighbors(node, grid) {\n    const neighbors = []\n    const { col, row } = node\n    if(row > 0) neighbors.push(grid[row - 1][col])\n    if(row < grid.length - 1) neighbors.push(grid[row + 1][col])\n    if(col > 0) neighbors.push(grid[row][col - 1])\n    if(col < grid[0].length - 1) neighbors.push(grid[row][col + 1])\n    return neighbors.filter(neighbor => !neighbor.visited)\n}","import React from \"react\";\n\nimport Node from \"./Node\";\nimport { dijkstra } from \"./algorithms/dijkstra\";\nimport { aStar } from \"./algorithms/astar\";\n\nconst startRow = 1;\nconst startCol = 1;\nconst endRow = 18;\nconst endCol = 38;\nconst rows = 20;\nconst cols = 40;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [[]],\n      mouseIsPressed: false,\n      searchStatus: \"Draw a grid and select an algorithm to start.\",\n    };\n  }\n\n  componentDidMount() {\n    const grid = createGrid(rows, cols);\n    this.setState({ grid });\n  }\n\n  async handleSort(algo) {\n    const grid = this.state.grid;\n    const startNode = grid[startRow][startCol];\n    const endNode = grid[endRow][endCol];\n    const nodesInVisitedOrder = algo(grid, startNode, endNode);\n    if (nodesInVisitedOrder === undefined) {\n      this.setState({ searchStatus: \"No solution.\" });\n    } else {\n      this.setState({ searchStatus: \"Searching...\" });\n      await this.animateSort(nodesInVisitedOrder);\n      this.setState({ searchStatus: \"Finding shortest path...\" });\n      await this.animateShortestPath(endNode);\n      this.setState({ searchStatus: \"Complete!\" });\n    }\n  }\n\n  async animateSort(nodesInVisitedOrder) {\n    for (let i = 0; i < nodesInVisitedOrder.length; i++) {\n      let node = nodesInVisitedOrder[i];\n      document.getElementById(`node-${node.row}-${node.col}`).className +=\n        \"node-visited\";\n      await new Promise((resolve) => setTimeout(resolve, 1));\n    }\n  }\n\n  async animateShortestPath(endNode) {\n    let current = endNode.previous;\n    while (current.previous !== null) {\n      document.getElementById(`node-${current.row}-${current.col}`).className =\n        \"node node-shortest\";\n      await new Promise((resolve) => setTimeout(resolve, 1));\n      current = current.previous;\n    }\n  }\n\n  handleMouseDown(row, col) {\n    const tempGrid = getGridWithWall(this.state.grid, row, col);\n    this.setState({ grid: tempGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const tempGrid = getGridWithWall(this.state.grid, row, col);\n    this.setState({ grid: tempGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  clear() {\n    let newGrid = [];\n    for (let i = 0; i < this.state.grid.length; i++) {\n      let row = [];\n      for (let j = 0; j < this.state.grid[i].length; j++) {\n        if (\n          !(\n            this.state.grid[i][j].isStart ||\n            this.state.grid[i][j].isEnd ||\n            this.state.grid[i][j].isWall\n          )\n        ) {\n          document.getElementById(`node-${i}-${j}`).className = `node ${\n            this.state.grid[i][j].isStart ? \"node-start\" : \"\"\n          }\n          ${this.state.grid[i][j].isEnd ? \"node-end\" : \"\"} ${\n            this.state.grid[i][j].isWall ? \"node-wall\" : \"\"\n          }`;\n        }\n        const newNode = {\n          row: i,\n          col: j,\n          previous: null,\n          visited: false,\n          isStart: this.state.grid[i][j].isStart,\n          isEnd: this.state.grid[i][j].isEnd,\n          isWall: this.state.grid[i][j].isWall,\n          distance: Infinity,\n          g: Infinity,\n          f: Infinity,\n        };\n        row.push(newNode);\n      }\n      newGrid.push(row);\n    }\n    this.setState({\n      grid: newGrid,\n      searchStatus: \"Draw a grid and select an algorithm to start.\",\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"pane\">\n            <div className=\"status\">{this.state.searchStatus}</div>\n            <div className=\"info\">\n              <div className=\"info-item\">\n                Unvisited - &nbsp; <div className=\"node\"></div>\n              </div>\n              <div className=\"info-item\">\n                Visited - &nbsp; <div className=\"node node-visited\"></div>\n              </div>\n              <div className=\"info-item\">\n                Start - &nbsp; <div className=\"node node-start\"></div>\n              </div>\n              <div className=\"info-item\">\n                End - &nbsp; <div className=\"node node-end\"></div>\n              </div>\n              <div className=\"info-item\">\n                Shortest Path - &nbsp;{\" \"}\n                <div className=\"node node-shortest\"></div>\n              </div>\n              <div className=\"info-item\">\n                Wall - &nbsp; <div className=\"node node-wall\"></div>\n              </div>\n            </div>\n            <div className=\"grid\">\n              {this.state.grid.map((row, rowIndex) => (\n                <div className=\"grid-row\" key={rowIndex}>\n                  {row.map((node, nodeIndex) => (\n                    <Node\n                      node={node}\n                      key={nodeIndex}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      mouseIsPressed={this.state.mouseIsPressed}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                    />\n                  ))}\n                </div>\n              ))}\n            </div>\n            <div className=\"banner\">\n              <button onClick={() => this.handleSort(aStar)} className=\"btn\">\n                A*\n              </button>\n              <button onClick={() => this.handleSort(dijkstra)} className=\"btn\">\n                Dijkstra\n              </button>\n              <button onClick={() => this.clear()} className=\"btn\">\n                Clear\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"tag\">\n          <a href=\"https://github.com/ShaneC0\">@ShaneC0</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst createGrid = (rows, cols) => {\n  const grid = [];\n  for (let i = 0; i < rows; i++) {\n    let row = [];\n    for (let j = 0; j < cols; j++) {\n      row.push(createNode(i, j));\n    }\n    grid.push(row);\n  }\n  return grid;\n};\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    previous: null,\n    visited: false,\n    isStart: col === startCol && row === startRow ? true : false,\n    isEnd: col === endCol && row === endRow ? true : false,\n    isWall: false,\n    distance: Infinity,\n    g: Infinity,\n    f: Infinity,\n  };\n};\n\nconst getGridWithWall = (grid, row, col) => {\n  const tempGrid = grid.slice();\n  const node = tempGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  tempGrid[row][col] = newNode;\n  return tempGrid;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}